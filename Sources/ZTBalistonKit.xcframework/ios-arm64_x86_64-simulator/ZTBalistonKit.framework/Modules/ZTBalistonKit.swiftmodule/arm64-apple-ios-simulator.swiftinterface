// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name ZTBalistonKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CoreBluetooth
import CoreData
import Foundation
import Swift
import UIKit
import ZTCoreKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension ZTBalistonKit.ZTBaliston {
  public func startMobilityScan(timeout: Swift.Double = 20, duration: Swift.Int = 60, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func stopMobilityScan(timeout: Swift.Double = 20, silently: Swift.Bool = false, meetMinimumRequirements: (([ZTBalistonKit.ZTBalistonPacket]) -> Swift.Bool)? = nil, completion: @escaping (ZTBalistonKit.ZTBalistonActivitySummary?, ZTCoreKit.ZTError?) -> Swift.Void)
  public func updateUserParameters(timeout: Swift.Double = 30, userParameters: ZTBalistonKit.ZTUserDataParameters?, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func hardReset(restart: Swift.Bool = false, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func stopAutomaticActivity(force: Swift.Bool = true, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func stopActivity(force: Swift.Bool = true, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func startActivity(forceStop: Swift.Bool = true, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston {
  public func hardReset(restart: Swift.Bool = false) async throws
  public func startMobilityScan(timeout: Swift.Double = 20, duration: Swift.Int = 60, userParameters: ZTBalistonKit.ZTUserDataParameters?) async throws
  public func stopMobilityScan(timeout: Swift.Double = 20, silently: Swift.Bool = false, meetMinimumRequirements: (([ZTBalistonKit.ZTBalistonPacket]) -> Swift.Bool)? = nil) async throws -> ZTBalistonKit.ZTBalistonActivitySummary?
  public func updateUserParameters(timeout: Swift.Double = 30, userParameters: ZTBalistonKit.ZTUserDataParameters?) async throws
}
extension ZTBalistonKit.ZTBaliston {
  public func sendDirectMessage(message: [Swift.String : Any], completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func getDirectMessages(completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
  public func deleteDirectMessage(id: Swift.String, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func sendCannedMessage(message: [Swift.String : Any], completion: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  public func getCannedMessages(parameters: [Swift.String : Any], completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
  public func getTileMessage(name: Swift.String, parameters: [Swift.String : Any], completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func getMobilityMessage(name: Swift.String, enqueue: Swift.Bool = true, completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func getMyShoesData(completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
  public func getMyShoeData(code: Swift.String = "", completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func startListenMessages(onMessageReceived: @escaping (Swift.String?) -> Swift.Void, onDataReceived: @escaping (Foundation.Data?) -> Swift.Void)
  public func stopListenMessages()
  public func postMobility(name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  public func getActivity(name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func getData(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  public func getDataArray(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping ([Any]?, (any Swift.Error)?) -> Swift.Void)
  public func postData(path: Swift.String, name: Swift.String, parameters: [Swift.String : Any] = [:], completion: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  public func getSwingAnalysis(body: [Swift.String : Any], completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston {
  public func sendRawDataCommand(attributes: [Swift.String : Any], userParameters: ZTBalistonKit.ZTUserDataParameters? = nil, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func sendRawDataCommandV2(attributes: [Swift.String : Any], userParameters: ZTBalistonKit.ZTUserDataParameters? = nil, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func stopActivity(timeout: Swift.Double = 30, shouldAutoSendRawData: Swift.Bool = true, completion: ZTBalistonKit.ZTActivityResult?)
  public func useRawDataFlow(enableRawData: Swift.Bool, attributes: [Swift.String : Any], userParameters: ZTBalistonKit.ZTUserDataParameters? = nil, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func useRawDataFlowV2(enableRawData: Swift.Bool, attributes: [Swift.String : Any], userParameters: ZTBalistonKit.ZTUserDataParameters? = nil, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func startActivityCommand(attributes: [Swift.String : Any], userParameters: ZTBalistonKit.ZTUserDataParameters? = nil, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func setInactivityTimeout(seconds: Foundation.TimeInterval, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func getInactivityTimeout(completion: @escaping (Swift.Int) -> Swift.Void)
  public func cleanMemory(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func calibrateGravity(calibrationPoint: Swift.UInt8 = 1, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func resetCalibration(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func setTxPower(value: ZTCoreKit.ZTTXPower, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston {
  public func isPendingActivity(activityId: Swift.String, completion: @escaping (Swift.Bool, ZTCoreKit.ZTError?) -> Swift.Void)
  public func pushPendingActivities(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func getLastActivityRawData(_ reset: Swift.Bool = false, completion: @escaping ZTCoreKit.ZTBaseResult)
  public func uploadRawData(for activityId: Swift.String) async throws
  public func connectLeftModuleForRawData(activityId: Swift.String)
}
extension ZTBalistonKit.ZTBalistonActivity {
  @nonobjc final public class func fetchRequest() -> CoreData.NSFetchRequest<ZTBalistonKit.ZTBalistonActivity>
}
@_inheritsConvenienceInitializers @objc(ZTBalistonActivity) final public class ZTBalistonActivity : ZTCoreKit.ZTActivity {
  final public let onActivityMetadataUpdated: ZTCoreKit.ZTSignal<()>
  final public var storeKey: Swift.String {
    get
  }
  override final public func upload<Packet>(_ packets: [Packet], context: CoreData.NSManagedObjectContext) async throws where Packet : ZTCoreKit.ZTPacketCachable
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ZTCoreKit.ZTRealtimeMessage.Side : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension ZTCoreKit.ZTRealtimeMetric {
  public typealias MetricSide = ZTCoreKit.ZTRealtimeMessage.Side
  public struct Slope {
    public let slopeAngle: Swift.Float?
    public let directionAngle: Swift.Float?
    public let side: ZTCoreKit.ZTRealtimeMetric.MetricSide?
  }
}
extension ZTBalistonKit.ZTBaliston {
  @available(*, deprecated, renamed: "initiateBackgroundDFU", message: "This method is deprecated, use method with name `initiateBackgroundDFU`")
  public func updateFirmware(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  @available(*, deprecated, renamed: "initiateBackgroundDFU", message: "This method is deprecated, use method with name `initiateBackgroundDFU`")
  public func updateFirmware(path: Swift.String, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston {
  public enum RawDataFlowState : Swift.String, Swift.Codable {
    case prepareRightModule
    case startRightModule
    case endRightModule
    case disconnectRightModule
    case startPeerConnection
    case connectLeftModule
    case prepareLeftModule
    case startLeftModule
    case endLeftModule
    case disconnectLeftModule
    case reconnectRightmodule
    case uploadData
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@_inheritsConvenienceInitializers final public class ZTBalistonActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: [Swift.String : Any]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTUserDataParameters : Swift.Codable {
  public enum Gender : Swift.UInt8, Swift.Codable {
    case male
    case female
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  final public var threadmillSpeed: Swift.Int?
  final public var bodyWeight: Swift.Int?
  final public var bodyHeight: Swift.Int?
  final public var shoeSize: Swift.Int?
  final public var age: Swift.Int?
  final public var gender: ZTBalistonKit.ZTUserDataParameters.Gender?
  public init(threadmillSpeed: Swift.Int? = nil, bodyWeight: Swift.Int?, bodyHeight: Swift.Int?, shoeSize: Swift.Int?, age: Swift.Int?, gender: ZTBalistonKit.ZTUserDataParameters.Gender?)
  public enum Parameters : Swift.UInt8 {
    case threadmillSpeed
    case bodyWeight
    case bodyHeight
    case shoeSize
    case age
    case gender
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ZTBalistonDfuDelegate {
  func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  func dfuDelegate(didFinish: Swift.Bool)
  func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  func dfuDelegate(progress: Swift.Float?)
  func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBaliston : ZTCoreKit.ZTDfuDelegate {
  public func initiateBackgroundDFU(isRestartRequired: Swift.Bool = false)
  public func initiateBackgroundDFU(path: Swift.String)
  public func reboot(completion: @escaping ZTCoreKit.ZTBaseResult)
  public func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  public func dfuDelegate(didFinish: Swift.Bool)
  public func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  public func dfuDelegate(progress: Swift.Float?)
  public func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  public func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTBalistonKit.ZTBalistonPacket {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ZTBalistonKit.ZTBalistonPacket>
}
@_hasMissingDesignatedInitializers @objc(ZTBalistonPacket) public class ZTBalistonPacket : ZTCoreKit.ZTPacket {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  required public init(data: Foundation.Data, activity: (any ZTCoreKit.ZTActivityCachable)?, fwVersion: Swift.String?, context: CoreData.NSManagedObjectContext, name: Swift.String = "ZTBalistonPacket")
  public func saveWithResult(_ allowOverwrite: Swift.Bool = false, in oneTimeContext: CoreData.NSManagedObjectContext) async
  public static func update(_ packets: [ZTBalistonKit.ZTBalistonPacket], status: ZTCoreKit.ZTPacket.Status, in managedContext: CoreData.NSManagedObjectContext) async
  public static func lastChunkID(for activityId: Swift.String) async -> Swift.Int16?
  public static func packetCount(for activityId: Swift.String) async -> Swift.Int
  @objc deinit
}
extension ZTBalistonKit.ZTBalistonPacket {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
extension ZTBalistonKit.ZTBalistonPacket {
  public static func forceSegmentsUpload(activityId: Swift.String)
  public static func updateSegmentsTimestamp(activityId: Swift.String, startId: Swift.Int16, anchorTime: Swift.Int64?) async
  public static func updateSegments(_ segmentsToUpdate: [ZTCoreKit.ZTPacket], status: ZTCoreKit.ZTPacket.Status, activityId: Swift.String?)
  public func loadPrevious(activityId: Swift.String?, chunkId: Swift.Int16, originalTimestamp: Swift.Int64) async -> ZTBalistonKit.ZTBalistonPacket?
}
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class ZTBaliston {
  public static let version: Swift.String
  public static let shared: ZTBalistonKit.ZTBaliston
  public static let requiredFwVersion: Swift.String
  public var dfuDelegate: (any ZTBalistonKit.ZTBalistonDfuDelegate)?
  public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  public var isActivityRunning: Swift.Bool? {
    get
  }
  public var lastSerialNumber: Swift.String? {
    get
  }
  public var currentActivity: ZTBalistonKit.ZTBalistonActivity?
  public var currentDfuState: ZTCoreKit.ZTMessageBootloaderInfo.DfuState {
    get
  }
  public var analyticsData: [Swift.String : Any]? {
    get
    set
  }
  public var isObtainingData: Swift.Bool {
    get
  }
  public var disableAutomaticActivity: Swift.Bool {
    get
  }
  public var activityStarted: Swift.Bool {
    get
  }
  public var isEnablingRealtimeStreaming: Swift.Bool {
    get
  }
  public var isCheckingAnalyticsData: Swift.Bool {
    get
  }
  public var defaultChunkDurationSeconds: Swift.Int
  public var isStreamingStarted: Swift.Bool {
    get
  }
  final public let onActivityStateChange: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, (any Swift.Error)?)>
  final public let onActivityStopped: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, (any Swift.Error)?)>
  final public let onActivityDataReceived: ZTCoreKit.ZTSignal<()>
  final public let onActivityError: ZTCoreKit.ZTSignal<ZTCoreKit.ZTError?>
  final public let onDfuStateUpdated: ZTCoreKit.ZTSignal<ZTCoreKit.ZTMessageBootloaderInfo.DfuState>
  final public let onDfuChanged: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTDFUState, ZTCoreKit.ZTError?)>
  final public let onDfuUploadProgress: ZTCoreKit.ZTSignal<Swift.Float?>
  final public let onChunksDownloadProgress: ZTCoreKit.ZTSignal<Swift.Float?>
  final public let onActivityMetadataUpdated: ZTCoreKit.ZTSignal<ZTCoreKit.ZTMessageActivityMetadata?>
  final public let onRealtimeMetricReceived: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTRealtimeMetric?, Any?)>
  final public let onAnalyticsDataUpdated: ZTCoreKit.ZTSignal<()>
  final public let onRawDataFlowStateChange: ZTCoreKit.ZTSignal<(ZTBalistonKit.ZTBaliston.RawDataFlowState?, (any Swift.Error)?)>
  final public let onRawDataFlowProgresss: ZTCoreKit.ZTSignal<Swift.Float>
  public var currentMode: ZTCoreKit.ZTActivityMode? {
    get
  }
  @objc deinit
  public func subscribeCoreEvents()
  public func readGeneralState(completion: @escaping (ZTCoreKit.ZTDeviceActualState?, ZTCoreKit.ZTError?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston {
  public func enableRealtimeStreaming(startDate: Foundation.Date, interval: Swift.Int16 = 1, metrics: Swift.Set<ZTCoreKit.ZTRealtimeMetric>, side: ZTCoreKit.ZTRealtimeMessage.Side = .none, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func disableRealtimeStreaming(noCheckInsole: Swift.Bool = false, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func pauseRealtimeStreaming(pause: Swift.Bool, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  public func enableSingleMetric(noCheckInsole: Swift.Bool = false, metric: ZTCoreKit.ZTRealtimeMetric, completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
}
extension ZTBalistonKit.ZTBaliston.RawDataFlowState : Swift.Equatable {}
extension ZTBalistonKit.ZTBaliston.RawDataFlowState : Swift.Hashable {}
extension ZTBalistonKit.ZTBaliston.RawDataFlowState : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.Equatable {}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.Hashable {}
extension ZTBalistonKit.ZTUserDataParameters.Gender : Swift.RawRepresentable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Equatable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.Hashable {}
extension ZTBalistonKit.ZTUserDataParameters.Parameters : Swift.RawRepresentable {}
